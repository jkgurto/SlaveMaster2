package game.library.objects {		import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;    import flash.text.TextFormat;    import flash.utils.Timer;        import game.library.objects.Boat;		/**	 * Current plan is to get level difficulties from an XML file, however	 * people can cheat and make levels easier	 * Other solution is to hardcode a table in this class that stores all the	 * data required in terms of difficulty per level	 */	public class Difficulty extends Sprite implements Pauseable {				public const MAX_TIME:int = 180;       // Ticks		public const TICK_INTERVAL:int = 1000; // Seconds				public const MAX_DISTANCE:int = 500;				public const TEXT_POINT_1:Point = new Point(600, 10);		public const TEXT_POINT_2:Point = new Point(600, 50);				private var _distanceLeftText:TextField = null;				private var _timeLeftText:TextField = null;        private var _timer:Timer = null;        private var paused:Boolean = false;                private var _level:int;        private var _maxSlaves:int;        private var _numSlaves:int;        private var _distance:int;				private var _boat:Boat;				private var _main:Main;				public function Difficulty(main:Main,		                           boat:Boat,		                           maxSlaves:int,		                           initialLevel:int = 1) {		    		    _main = main;		    		    _boat = boat;		    _maxSlaves = maxSlaves;		    _level = initialLevel;		    _numSlaves = 4;		    _distance = MAX_DISTANCE * _numSlaves;		    		    _maxSlaves = maxSlaves;		    		    // -- Format		    var format:TextFormat = new TextFormat();            format.color = 0xFF0000;            format.size = 24;		    		    // -- Distance            _distanceLeftText = new TextField();            _distanceLeftText.autoSize = TextFieldAutoSize.CENTER;            _distanceLeftText.defaultTextFormat = format;            _distanceLeftText.text = "Distance: " + _distance;                        _distanceLeftText.x = TEXT_POINT_1.x;            _distanceLeftText.y = TEXT_POINT_1.y;                        this.addChild(_distanceLeftText);						// -- Timer            _timeLeftText = new TextField();            _timeLeftText.autoSize = TextFieldAutoSize.CENTER;            _timeLeftText.defaultTextFormat = format;            _timeLeftText.text = "Time: " + MAX_TIME;                        _timeLeftText.x = TEXT_POINT_2.x;            _timeLeftText.y = TEXT_POINT_2.y;                        this.addChild(_timeLeftText);                        _timer = new Timer(TICK_INTERVAL, MAX_TIME);            _timer.addEventListener(TimerEvent.TIMER, onTick);            _timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);                        _timer.start();		}				public function get level():int {			return _level;		}				public function set level(value:int):void {			_level = value;		}				public function get numSlaves():int {			return _numSlaves;		}				public function get distance():int {			return _distance;		}				public function set distance(value:int):void {			_distance = value;			_distanceLeftText.text = "Distance: " + _distance;		}				public function get distanceLeftText():TextField {		    return _distanceLeftText;		}				public function get timeLeftText():TextField {		    return _timeLeftText;		}				public function pause():void {		    		    if (_timer.running) {    		    paused = true;    		    _timer.stop();		    }		}		        public function resume():void {                        if (paused) {                paused = false;                _timer.start();            }        }                public function update(frameRate:Number):void {                        _distance -= (_boat.speed / frameRate);            _distanceLeftText.text = "Distance: " + _distance;                        // Distance finished            if (_distance <= 0) {                _main.setCurrentState("GameOverState");            }        }				private function onTick(event:TimerEvent):void {		                // -- Timer            // Count down, not up            _timeLeftText.text =                "Time: " + (MAX_TIME - event.target.currentCount);        }                private function onTimerComplete(event:TimerEvent):void        {            // Timer finished            //timeLeftText.text = "Time's Up!";            _main.setCurrentState("GameOverState");        }			}}